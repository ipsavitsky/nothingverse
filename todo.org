* DONE Database of posts; rendering of posts, live update of posts (sse again? - no, just polling is enough)
* TODO Make replies to posts
** DONE Submits work
** DONE Query and display correctly
** TODO Make them update correctly
So I doubt that I'll need to do the complicated polling mechanism I have for posts - too many connections to uphold. I would rather have reply be inserted by htmx upon generating and then pull *ALL* replies when reloading the page.
* DONE Make infinitely scrollable feed
* DONE CSS (tailwind? just inline my styles?)
** KILL Bundling (Do I even need it? How do I pair it with nix?)
* DONE Make post insubmittable before generation is done
* TODO Nix
** TODO Nix service definition
** TODO Nix definition of a model file package
* TODO Write a readme
* IDEA Decide if we need a custom generation sse handler
Currently, the server grows the string out of generation tokens, but what if we only send the tokens and grow the string on the frontend and backend.
* HOLD Known issues
** DONE After sse stream is closed, the connection gets dropped from the pool, which is not good
** DONE All 3 buttons submit the same first post
** HOLD XSS attack is possible
The frontend should not be the source of truth for the post content. Ideally, the frontend post and reply buttons should only send the post number (a generation UUID, perhaps?), so that I can't just submit anything on the ~/submit_*~ endpoint.
On the second thought, ~/generate_*~ endpoints should write to the generation table, and posts and replies should join on generation id. No UUID requred and no frontend state.
I have implemented the generations table - but is it safe? I can still reply with any post in that table. I guess that's better at least
** DONE Code duplication - LOADS of code duplicated, just take a look at index.rs and new_posts.rs
*** DONE Database code consolidated to a single file
*** DONE Templating code still needs a rework
A lot of templates are including other templates and require some rereading of data. This may be avoided with blocks maybe (?)
does it though?
https://rinja-rs.github.io/askama/
*** DONE The code of templates themselves needs to be cleaned up, it's very messy
** KILL Some naming convention connecting template <-> implementation would be nice
** DONE The website name. As I import the logo html unedited - this proves a big problem as it also imports the title
** DONE Improve error handling, get rid of most unwrap() calls in favor of Result<> or expect()
** DONE Monitor the update to latest axum
Currently held back by https://github.com/rinja-rs/askama/issues/1128
